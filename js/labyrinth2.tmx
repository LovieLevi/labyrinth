gamederevnia = class{
  // размер карты
  grid = {
    width:  40,
    height: 30,
  };

  // размер тайла
  tile = {
    width:  16,
    height: 16,
  };

  // игрок
  player;

  layers = {
    background: [
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,17,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,18,44,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,23,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,21,1,1,1,33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,1],
      [1,1,1,1,1,1,1,23,1,1,23,1,1,34,11,11,11,35,11,11,1,1,1,11,11,11,11,11,24,1,1,1,1,1,29,1,1,1,1,1],
      [1,1,1,1,1,1,1,46,11,11,36,1,1,33,1,1,1,47,1,1,1,1,1,1,1,1,1,1,33,1,1,1,1,1,29,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,33,34,11,36,1,1,23,1,1,1,1,1,1,1,1,1,1,1,33,1,1,1,1,1,21,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,33,1,1,33,23,1,34,11,36,1,1,1,1,1,1,1,1,1,34,11,11,11,11,11,47,12,1,1,1,1],
      [1,1,1,1,1,1,1,1,34,11,47,11,11,35,11,23,47,36,1,1,1,1,1,1,1,1,1,1,45,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,34,36,1,33,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,33,1,47,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,33,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,45,16,1,1,15,1,16,1,1,1,1,1,1,1,1,29,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,16,15,27,16,16,1,1,1,1,1,1,42,20,1,1,1,1,1,1,39,1,1,2],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,27,16,1,16,15,3,1,1,1,1,1,1,1,1,29,1,1,1,1,1,1,13,1,27,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,38,16,16,1,1,38,3,27,1,1,1,1,1,1,29,1,1,1,1,1,1,1,1,16,16],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,15,38,16,38,3,38,3,15,15,1,1,1,1,18,44,1,1,1,1,1,2,1,16,16,16],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,16,1,1,16,16,16,15,1,1,1,1,1,1,1,1,1,1,1,16,16,16,16,28],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,42,20,16,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,39,1,15,16,16,16,28,28,28],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,29,1,1,17,1,1,1,1,1,1,1,1,1,16,16,16,28,28,28,28,40],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,17,1,1,29,1,1,1,1,1,1,1,1,1,1,16,28,28,40,40,40,40],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,29,1,1,29,1,1,1,1,1,1,1,1,1,1,28,28,28,40,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,42,7,7,7,7,43,7,7,43,7,7,7,7,7,8,1,1,1,1,28,28,28,40,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,28,40,40,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,28,40,40,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,28,40,40,40,1,1],
    ],
    ground: [
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,61,62,85,75,9,9,9,9,9,9,9,9,149,150,151,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,49,98,85,75,55,56,56,56,56,56,56,57,9,161,162,163,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,61,62,63,9,67,154,155,155,155,155,156,69,9,173,174,175,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,145,146,147,148,9,9,9,9,9,9,61,62,63,9,67,166,167,167,167,167,168,103,57,185,186,187,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,157,158,159,160,9,9,9,9,9,9,61,62,63,9,79,92,166,167,167,167,167,168,69,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,169,170,171,172,9,9,9,9,9,49,98,85,75,9,9,67,178,179,179,179,179,180,69,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,181,182,183,184,9,9,220,9,9,61,62,63,9,9,9,79,80,99,80,80,80,80,81,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,61,62,63,9,9,9,9,9,33,9,9,9,9,9,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,218,9,9,220,9,9,9,9,9,9,9,9,9,109,110,111,9,9,9,9,9,36,9,9,9,9,9,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,220,9,9,121,122,123,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,219,9,9,9,9,217,9,9,9,61,62,63,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,218,9,9,9,220,9,61,62,97,50,50,50,51,1,9,9,9,9,9,9,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,220,9,9,9,9,9,9,9,9,219,9,9,61,62,62,62,62,62,97,51,9,9,9,9,58,59,59,60,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,217,9,9,9,9,9,9,9,73,86,62,85,74,86,62,63,9,58,59,59,107,71,71,106,60,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,220,9,9,9,9,9,61,62,63,39,61,62,63,9,70,71,94,83,95,71,71,72,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,61,62,97,50,98,62,63,9,70,71,72,231,70,71,71,72,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,73,86,62,62,62,62,63,9,82,95,72,243,70,71,71,72,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,73,74,86,85,74,75,9,9,70,106,59,107,71,94,84,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,61,63,96,152,153,9,70,71,71,71,71,72,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,61,97,51,164,165,9,70,71,71,71,71,72,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,73,86,63,176,177,9,82,95,71,71,94,84,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,61,63,188,189,9,25,82,83,83,84,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,190,9,9,9,9,9,61,97,50,50,50,51,9,9,9,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,202,9,200,9,201,9,73,86,62,62,62,97,51,9,9,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,198,9,199,9,9,73,74,74,86,62,97,51,9,9,9,9,9,9,9],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,199,9,201,199,200,198,201,199,61,62,62,63,9,9,9,9,52,53,54],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,61,62,85,75,9,9,9,9,64,65,109],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,199,201,198,199,198,201,199,49,50,50,50,98,62,63,16,28,28,9,9,64,65,65],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,49,50,50,98,62,62,62,62,62,63,16,28,9,9,9,76,89,65],
      [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,61,62,62,85,74,74,74,74,74,75,38,28,28,9,9,9,64,65],
    ],
  }

  // инициализация и запуск игры
  constructor() {
    const width = 40; // Math.floor(window.innerWidth / this.tile.width);
    const height = 30; // Math.floor(window.innerHeight / this.tile.height);

    this.grid = {
      width: width,
      height: height,
    }

    // задаём размер и цвет фона
    Crafty.init(width * this.tile.width, height * this.tile.height);
    Crafty.background("rgb(0, 0, 0)");

    this.screenLoad();
    Crafty.scene("main", this.screenMain.bind(this));
  }

  positionX(x) {
    return this.tile.width * x;
  }

  positionY(y) {
    return this.tile.height * y;
  }

  // сцена загрузки игры
  screenLoad() {
    const width = this.grid.width * this.tile.width;
    const height = this.grid.height * this.tile.height;

    // инициализируем спрайты
    const assets = {
      sprites: {
        "img/grass_tiles.png": {
          tile: 16,
          tileh: 16,
          map: {
            grass:    [0,  0],
            grass1:   [1,  0],
            grass2:   [2,  0],
            flower1:  [1,  1],
            flower2:  [2,  1],
            flower3:  [1,  2],
            flower4:  [2,  2],
            flower5:  [1,  3],
            flower6:  [2,  3],
            block1:   [11, 7],
            block2:   [6,  16],
            water_tl: [0,  7],
            water_t:  [1,  4],
            water_tr: [1,  7],
            water_l:  [0,  5],
            water_r:  [2,  5],
            water_bl: [0,  8],
            water_b:  [1,  6],
            water_br: [1,  8],
            home:     [3, 18]
          },
        },
        "img/character.png": {
          tile: 16,
          tileh: 16,
          map: {
            player: [0, 0],
          },
        },
      }
    };

    for (var y = 0; y < 21; y++) {
      for (var x = 0; x < 12; x++) {
        assets["sprites"]["img/grass_tiles.png"]["map"]["sprite" + (x + (y * 12) + 1)] = [x, y]
      }
    }

    // console.log(assets);

    Crafty.scene("loading", function() {
      // когда загрузка спрайтов завершится, запускаем главную сцену игры
      Crafty.load(assets, function() {
        Crafty.scene("main");
      });

      // рисуем чёрный фон и текст в центре
      Crafty.background("#000");
      Crafty.e("2D, DOM, Text").attr({w: 100, h: 20, x: (width - 100) / 2, y: (height - 20) / 2})
        .text("Загрузка")
        .css({"text-align": "center"});
    });

    // сразу запустим сцену загрузки
    Crafty.scene("loading");
  }

  // генерируем новый мир
  generateWorld() {
    let x, y;

    for (x = 0; x < this.grid.width; x++) {
      for (y = 0; y < this.grid.height; y++) {
        if (this.layers.background[y][x]) {
          const tile = "sprite" + this.layers.background[y][x];
          Crafty.e("2D, Canvas, " + tile).attr({x: this.positionX(x), y: this.positionY(y), z: 0});
        }
      }
    }
    for (x = 0; x < this.grid.width; x++) {
      for (y = 0; y < this.grid.height; y++) {
        if (this.layers.background[y][x] > 0 && this.layers.background[y][x] !== 9) {
          const tile = "sprite" + this.layers.ground[y][x];
          Crafty.e("2D, Canvas, solid, " + tile).attr({x: this.positionX(x), y: this.positionY(y), z: 0});
        }
      }
    }

    // // рисуем границы карты водой
    // for (x = 1; x < this.grid.width - 1; x++) {
    //   Crafty.e("2D, Canvas, water_b, solid").attr({x: this.positionX(x), y: 0, z: 0});
    //   Crafty.e("2D, Canvas, water_t, solid").attr({x: this.positionX(x), y: this.positionY(this.grid.height - 1), z: 0});
    // }
    // for (y = 1; y < this.grid.height - 1; y++) {
    //   Crafty.e("2D, Canvas, water_r, solid").attr({x: 0, y: this.positionY(y), z: 0});
    //   Crafty.e("2D, Canvas, water_l, solid").attr({x: this.positionX(this.grid.width - 1), y: this.positionY(y), z: 0});
    // }
    // Crafty.e("2D, Canvas, water_tl, solid").attr({x: 0, y: 0, z: 0});
    // Crafty.e("2D, Canvas, water_tr, solid").attr({x: this.positionX(this.grid.width - 1), y: 0, z: 0});
    // Crafty.e("2D, Canvas, water_bl, solid").attr({x: 0, y: this.positionY(this.grid.height - 1), z: 0});
    // Crafty.e("2D, Canvas, water_br, solid").attr({x: this.positionX(this.grid.width - 1), y: this.positionY(this.grid.height - 1), z: 0});
  }
  // главный экран игры
  screenMain() {
    this.generateWorld();

    // создаём игрока
    this.player = Crafty.e("2D, DOM, player, Multiway, SpriteAnimation, Collision")
      .attr({x: this.positionX(5), y: this.positionY(5), z: 1})
      .multiway(100, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180}, {"multipleDirectionBehavior": "last"})

      // настраиваем анимации
      .reel("walk_down",  500, [[0, 0], [1, 0], [2, 0], [3, 0]])
      .reel("walk_up",    500, [[0, 1], [1, 1], [2, 1], [3, 1]])
      .reel("walk_right", 500, [[0, 2], [1, 2], [2, 2], [3, 2]])
      .reel("walk_left",  500, [[0, 3], [1, 3], [2, 3], [3, 3]])
      .bind("NewDirection", function (direction) {
        // меняем направление, когда получим событие "смена направления"
        if (direction.x < 0) {
          if (!this.isPlaying("walk_left"))
            this.animate("walk_left", -1);
        }
        if (direction.x > 0) {
          if (!this.isPlaying("walk_right"))
            this.animate("walk_right", -1);
        }
        if (direction.y < 0) {
          if (!this.isPlaying("walk_up"))
            this.animate("walk_up", -1);
        }
        if (direction.y > 0) {
          if (!this.isPlaying("walk_down"))
            this.animate("walk_down", -1);
        }
        if (!direction.x && !direction.y) {
          this.pauseAnimation();
        }
      })
      .bind("Move", function(evt) {
        // не даём пройти через препятствия
        if (this.hit('solid')) {
          this.x = evt._x;
          this.y = evt._y;
        }
      });
  
    }
  }
